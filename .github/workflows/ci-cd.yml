name: 🚀 CI/CD Pipeline - Ordem do Dia

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".github/**"
      - "!.github/workflows/**"
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # 🧪 TESTES E QUALIDADE
  tests:
    name: 🧪 Testes e Qualidade de Código
    runs-on: windows-latest

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐍 Configurar Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: 📦 Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov black flake8 mypy bandit safety

      - name: 🎨 Verificar formatação (Black)
        run: |
          black --check --diff .

      - name: 🔍 Linting (Flake8)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: 🔒 Verificação de segurança (Bandit)
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium

      - name: 🛡️ Verificar vulnerabilidades (Safety)
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: 🧪 Executar testes unitários
        run: |
          pytest tests/ -v --cov=. --cov-report=html --cov-report=xml --cov-fail-under=70

      - name: 📊 Upload coverage para Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📋 Artefatos de relatórios
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            htmlcov/
            bandit-report.json
            safety-report.json
            coverage.xml

  # 🔨 BUILD DO EXECUTÁVEL
  build:
    name: 🔨 Build Executável Windows
    runs-on: windows-latest
    needs: tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'release'

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐍 Configurar Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: 📦 Instalar dependências de build
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: 🔨 Gerar executável
        run: |
          python build_exe.py

      - name: ✅ Verificar executável
        run: |
          if (Test-Path "distribuicao_completa/GeradorOD.exe") {
            Write-Host "✅ Executável criado com sucesso!"
            $size = (Get-Item "distribuicao_completa/GeradorOD.exe").Length / 1MB
            Write-Host "📊 Tamanho: $([math]::Round($size, 2)) MB"
          } else {
            Write-Error "❌ Executável não foi criado!"
            exit 1
          }

      - name: 🧪 Teste básico do executável
        run: |
          # Teste se o executável inicia sem erros (modo CLI)
          try {
            $process = Start-Process -FilePath "distribuicao_completa/GeradorOD.exe" -ArgumentList "--help" -Wait -NoNewWindow -PassThru
            if ($process.ExitCode -eq 0) {
              Write-Host "✅ Executável passou no teste básico"
            } else {
              Write-Host "⚠️ Executável retornou código: $($process.ExitCode)"
            }
          } catch {
            Write-Host "⚠️ Erro ao testar executável: $($_.Exception.Message)"
          }

      - name: 📦 Criar pacote de distribuição
        run: |
          # Criar ZIP com distribuição completa
          $version = "v2.0-$(Get-Date -Format 'yyyyMMdd')-$($env:GITHUB_SHA.Substring(0,7))"
          Compress-Archive -Path "distribuicao_completa/*" -DestinationPath "OrdemDoDia-$version.zip"

          # Criar hash do arquivo
          $hash = Get-FileHash "OrdemDoDia-$version.zip" -Algorithm SHA256
          $hash.Hash | Out-File "OrdemDoDia-$version.zip.sha256"

          Write-Host "📦 Pacote criado: OrdemDoDia-$version.zip"

      - name: 📤 Upload artefatos
        uses: actions/upload-artifact@v4
        with:
          name: executavel-windows
          path: |
            OrdemDoDia-*.zip
            OrdemDoDia-*.zip.sha256
          retention-days: 30

  # 🚀 RELEASE AUTOMÁTICO
  release:
    name: 🚀 Create Release
    runs-on: windows-latest
    needs: [tests, build]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: 📥 Download artefatos
        uses: actions/download-artifact@v4
        with:
          name: executavel-windows

      - name: 🚀 Upload para Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            OrdemDoDia-*.zip
            OrdemDoDia-*.zip.sha256
          body: |
            ## 🎉 Nova versão do Ordem do Dia!

            ### 📦 Arquivos de Download
            - **OrdemDoDia-*.zip**: Aplicação completa com executável
            - **OrdemDoDia-*.zip.sha256**: Hash SHA256 para verificação

            ### 🚀 Como Usar
            1. Baixe o arquivo ZIP
            2. Extraia em uma pasta de sua escolha
            3. Execute `GeradorOD.exe`
            4. Siga as instruções na interface

            ### 📋 Requisitos
            - Windows 10/11 (64-bit)
            - 4GB RAM mínimo
            - 100MB espaço livre

            ### 🆘 Suporte
            - 📖 Manual: Incluído no ZIP
            - 🐛 Issues: [GitHub Issues](https://github.com/${{ github.repository }}/issues)
            - 📧 Email: [Contato do desenvolvedor]

            ---
            **Testado em**: Windows 10, Windows 11  
            **Build**: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 📋 NOTIFICAÇÕES
  notify:
    name: 📋 Notificações
    runs-on: ubuntu-latest
    needs: [tests, build]
    if: always()

    steps:
      - name: 💬 Notificar sucesso
        if: needs.tests.result == 'success' && needs.build.result == 'success'
        run: |
          echo "✅ Pipeline executado com sucesso!"
          echo "🧪 Testes: PASSOU"
          echo "🔨 Build: PASSOU"

      - name: 🚨 Notificar falha
        if: needs.tests.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "❌ Pipeline falhou!"
          echo "🧪 Testes: ${{ needs.tests.result }}"
          echo "🔨 Build: ${{ needs.build.result }}"
          exit 1
