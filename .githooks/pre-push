#!/bin/bash
# Pre-push hook para Ordem do Dia
# Este script executa antes de cada push para garantir qualidade do c√≥digo

echo "üöÄ Executando verifica√ß√µes pre-push..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para printar mensagens coloridas
print_status() {
    case $2 in
        "success") echo -e "${GREEN}‚úÖ $1${NC}" ;;
        "error") echo -e "${RED}‚ùå $1${NC}" ;;
        "warning") echo -e "${YELLOW}‚ö†Ô∏è $1${NC}" ;;
        "info") echo -e "${BLUE}‚ÑπÔ∏è $1${NC}" ;;
        *) echo "üìã $1" ;;
    esac
}

# Verificar branch
BRANCH=$(git rev-parse --abbrev-ref HEAD)
print_status "Branch atual: $BRANCH" "info"

# Verificar se h√° mudan√ßas n√£o commitadas
if ! git diff-index --quiet HEAD --; then
    print_status "H√° mudan√ßas n√£o commitadas. Commit primeiro." "error"
    exit 1
fi

# Ativar ambiente virtual se necess√°rio
if [ -z "$VIRTUAL_ENV" ]; then
    if [ -f ".venv/Scripts/activate" ]; then
        source .venv/Scripts/activate
    elif [ -f ".venv/bin/activate" ]; then
        source .venv/bin/activate
    fi
fi

# Contador de problemas
ERRORS=0
WARNINGS=0

# 1. Suite completa de testes
print_status "Executando suite completa de testes..." "info"
if ! .venv/Scripts/python.exe -m pytest test_simple.py --tb=short; then
    print_status "Testes falharam" "error"
    ERRORS=$((ERRORS + 1))
else
    print_status "Todos os testes passaram" "success"
fi

# 2. Verificar cobertura de testes
print_status "Verificando cobertura de testes..." "info"
COVERAGE=$(python -m pytest --cov=. --cov-report=term-missing tests/ 2>/dev/null | grep "TOTAL" | awk '{print $4}' | sed 's/%//')

if [ ! -z "$COVERAGE" ]; then
    if (( $(echo "$COVERAGE < 80" | bc -l) )); then
        print_status "Cobertura baixa: ${COVERAGE}% (m√≠nimo 80%)" "warning"
        WARNINGS=$((WARNINGS + 1))
    else
        print_status "Cobertura de testes: ${COVERAGE}%" "success"
    fi
else
    print_status "N√£o foi poss√≠vel calcular cobertura" "warning"
    WARNINGS=$((WARNINGS + 1))
fi

# 3. Verificar se execut√°vel pode ser gerado
print_status "Testando gera√ß√£o do execut√°vel..." "info"
if .venv/Scripts/python.exe build_exe.py > build_log.txt 2>&1; then
    print_status "Execut√°vel gerado com sucesso" "success"
    
    # Verificar tamanho do execut√°vel
    if [ -f "distribuicao_completa/GeradorOD.exe" ]; then
        SIZE=$(stat -c%s "distribuicao_completa/GeradorOD.exe" 2>/dev/null || stat -f%z "distribuicao_completa/GeradorOD.exe" 2>/dev/null)
        SIZE_MB=$((SIZE / 1024 / 1024))
        
        if [ $SIZE_MB -gt 100 ]; then
            print_status "Execut√°vel muito grande: ${SIZE_MB}MB" "warning"
            WARNINGS=$((WARNINGS + 1))
        else
            print_status "Tamanho do execut√°vel: ${SIZE_MB}MB" "success"
        fi
    fi
    
    # Limpeza
    rm -rf build_temp distribuicao distribuicao_completa 2>/dev/null
else
    print_status "Falha na gera√ß√£o do execut√°vel:" "error"
    cat build_log.txt
    ERRORS=$((ERRORS + 1))
fi

rm -f build_log.txt

# 4. Verificar se h√° TODO/FIXME no c√≥digo
print_status "Verificando TODOs e FIXMEs..." "info"
TODO_COUNT=$(grep -r "TODO\|FIXME\|XXX\|HACK" *.py tests/ 2>/dev/null | wc -l)
if [ $TODO_COUNT -gt 0 ]; then
    print_status "$TODO_COUNT TODO/FIXME encontrados" "warning"
    grep -r "TODO\|FIXME\|XXX\|HACK" *.py tests/ 2>/dev/null | head -5
    WARNINGS=$((WARNINGS + 1))
else
    print_status "Nenhum TODO/FIXME encontrado" "success"
fi

# 5. Verificar se documenta√ß√£o est√° atualizada
print_status "Verificando documenta√ß√£o..." "info"
if [ "$BRANCH" = "main" ]; then
    # Verificar se README foi atualizado recentemente
    README_AGE=$(git log -1 --format=%ct README.md)
    CODE_AGE=$(git log -1 --format=%ct *.py)
    
    if [ $CODE_AGE -gt $README_AGE ]; then
        print_status "README pode estar desatualizado" "warning"
        WARNINGS=$((WARNINGS + 1))
    else
        print_status "Documenta√ß√£o atualizada" "success"
    fi
fi

# 6. Verifica√ß√µes espec√≠ficas por branch
case $BRANCH in
    "main")
        print_status "Verifica√ß√µes para branch main..." "info"
        
        # Verificar se vers√£o foi atualizada (se h√° tag)
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null)
        if [ ! -z "$LAST_TAG" ]; then
            # Verificar se h√° commits desde a √∫ltima tag
            COMMITS_SINCE_TAG=$(git rev-list ${LAST_TAG}..HEAD --count)
            if [ $COMMITS_SINCE_TAG -gt 0 ]; then
                print_status "$COMMITS_SINCE_TAG commits desde $LAST_TAG - considere criar nova tag" "warning"
                WARNINGS=$((WARNINGS + 1))
            fi
        fi
        ;;
        
    "develop")
        print_status "Verifica√ß√µes para branch develop..." "info"
        # Verifica√ß√µes espec√≠ficas para develop
        ;;
        
    *)
        print_status "Branch feature detectada" "info"
        ;;
esac

# 7. Verificar se h√° conflitos de merge pendentes
print_status "Verificando conflitos de merge..." "info"
if grep -r "<<<<<<< HEAD\|>>>>>>> \|=======" *.py tests/ 2>/dev/null; then
    print_status "Conflitos de merge detectados!" "error"
    ERRORS=$((ERRORS + 1))
else
    print_status "Nenhum conflito de merge detectado" "success"
fi

# 8. Verificar commits
print_status "Verificando qualidade dos commits..." "info"
LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
if [[ $LAST_COMMIT_MSG =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: ]]; then
    print_status "Formato de commit OK (Conventional Commits)" "success"
else
    print_status "Commit n√£o segue Conventional Commits (recomendado)" "warning"
    WARNINGS=$((WARNINGS + 1))
fi

# Resumo final
echo ""
echo "üìä Resumo das verifica√ß√µes:"
print_status "Erros: $ERRORS" $([ $ERRORS -eq 0 ] && echo "success" || echo "error")
print_status "Avisos: $WARNINGS" $([ $WARNINGS -eq 0 ] && echo "success" || echo "warning")

if [ $ERRORS -eq 0 ]; then
    print_status "üéâ Push autorizado!" "success"
    
    if [ $WARNINGS -gt 0 ]; then
        print_status "‚ö†Ô∏è $WARNINGS aviso(s) encontrado(s), mas n√£o s√£o bloqueantes." "warning"
    fi
    
    exit 0
else
    print_status "‚õî $ERRORS erro(s) encontrado(s). Corrija antes de fazer push." "error"
    echo ""
    echo "üí° Dicas para corrigir:"
    echo "   - Execute 'pytest tests/' para ver falhas em testes"
    echo "   - Execute 'python build_exe.py' para testar o build"
    echo "   - Resolva conflitos de merge se houver"
    echo "   - Certifique-se de que todos os commits foram feitos"
    
    exit 1
fi
