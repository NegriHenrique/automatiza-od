#!/bin/bash

# üöÄ Pre-push Hook - Ordem do Dia
# ===============================
# Verifica√ß√µes antes do push para garantir qualidade

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Contadores
ERRORS=0
WARNINGS=0

# Fun√ß√£o para print com status
print_status() {
    local message="$1"
    local type="${2:-info}"
    
    case $type in
        "success")
            echo -e "‚úÖ ${GREEN}${message}${NC}"
            ;;
        "error")
            echo -e "‚ùå ${RED}${message}${NC}"
            ;;
        "warning")
            echo -e "‚ö†Ô∏è ${YELLOW}${message}${NC}"
            ;;
        "info")
            echo -e "‚ÑπÔ∏è ${BLUE}${message}${NC}"
            ;;
        *)
            echo -e "${message}"
            ;;
    esac
}

# Header
echo ""
print_status "üöÄ Executando verifica√ß√µes pre-push..." "info"

# Verificar branch atual
BRANCH=$(git branch --show-current)
print_status "Branch atual: $BRANCH" "info"

# 1. Executar suite de testes
print_status "Executando suite completa de testes..." "info"
if python -m pytest tests/ -v; then
    print_status "Todos os testes passaram" "success"
else
    print_status "Falhas em testes detectadas!" "error"
    ERRORS=$((ERRORS + 1))
fi

# 2. Verificar cobertura de testes
print_status "Verificando cobertura de testes..." "info"
COVERAGE=$(python -m pytest --cov=. --cov-report=term-missing tests/ 2>/dev/null | grep "TOTAL" | awk '{print $4}' | sed 's/%//')

if [ ! -z "$COVERAGE" ]; then
    if [ "$COVERAGE" -lt 70 ]; then
        print_status "Cobertura baixa: ${COVERAGE}% (m√≠nimo 70%)" "warning"
        WARNINGS=$((WARNINGS + 1))
    else
        print_status "Cobertura de testes: ${COVERAGE}%" "success"
    fi
else
    print_status "N√£o foi poss√≠vel calcular cobertura" "warning"
    WARNINGS=$((WARNINGS + 1))
fi

# 3. Verificar se execut√°vel pode ser gerado
print_status "Testando gera√ß√£o do execut√°vel..." "info"
if python build_exe.py > build_log.txt 2>&1; then
    print_status "Execut√°vel gerado com sucesso" "success"
    
    # Verificar tamanho do execut√°vel
    if [ -f "distribuicao_completa/GeradorOD.exe" ]; then
        SIZE=$(du -m "distribuicao_completa/GeradorOD.exe" | cut -f1)
        print_status "Tamanho do execut√°vel: ${SIZE}MB" "success"
    fi
else
    print_status "Falha na gera√ß√£o do execut√°vel!" "error"
    ERRORS=$((ERRORS + 1))
fi

# 4. Verificar TODOs e FIXMEs
print_status "Verificando TODOs e FIXMEs..." "info"
if git diff --cached --name-only | grep -E '\.(py|yml|yaml|json)$' | xargs grep -n "TODO\|FIXME" 2>/dev/null; then
    print_status "TODOs/FIXMEs encontrados - considere resolver" "warning"
    WARNINGS=$((WARNINGS + 1))
else
    print_status "Nenhum TODO/FIXME encontrado" "success"
fi

# 5. Verificar se documenta√ß√£o est√° atualizada
print_status "Verificando documenta√ß√£o..." "info"
if [ -f "README.md" ]; then
    README_AGE=$(git log -1 --format=%ct README.md 2>/dev/null || echo 0)
    CODE_AGE=$(git log -1 --format=%ct *.py 2>/dev/null || echo 0)
    
    if [ $CODE_AGE -gt $README_AGE ]; then
        print_status "README pode estar desatualizado" "warning"
        WARNINGS=$((WARNINGS + 1))
    else
        print_status "Documenta√ß√£o atualizada" "success"
    fi
fi

# 6. Verifica√ß√µes espec√≠ficas por branch
case $BRANCH in
    "main")
        print_status "Verifica√ß√µes para branch main..." "info"
        
        # Verificar se vers√£o foi atualizada (se h√° tag)
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null)
        if [ ! -z "$LAST_TAG" ]; then
            # Verificar se h√° commits desde a √∫ltima tag
            COMMITS_SINCE_TAG=$(git rev-list ${LAST_TAG}..HEAD --count)
            if [ $COMMITS_SINCE_TAG -gt 0 ]; then
                print_status "$COMMITS_SINCE_TAG commits desde $LAST_TAG - considere criar nova tag" "warning"
                WARNINGS=$((WARNINGS + 1))
            fi
        fi
        ;;
        
    "develop")
        print_status "Verifica√ß√µes para branch develop..." "info"
        # Verifica√ß√µes espec√≠ficas para develop
        ;;
        
    *)
        print_status "Branch feature detectada" "info"
        ;;
esac

# 7. Verificar se h√° conflitos de merge pendentes
print_status "Verificando conflitos de merge..." "info"
if git ls-files -u | grep -q .; then
    print_status "Conflitos de merge detectados!" "error"
    ERRORS=$((ERRORS + 1))
elif grep -rE "^<<<<<<< |^>>>>>>> |^=======$" --include="*.py" --include="*.yml" --include="*.yaml" --include="*.json" . 2>/dev/null; then
    print_status "Poss√≠veis marcadores de conflito encontrados!" "error"
    ERRORS=$((ERRORS + 1))
else
    print_status "Nenhum conflito detectado" "success"
fi

# 8. Verificar qualidade dos commits
print_status "Verificando qualidade dos commits..." "info"
LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
if echo "$LAST_COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+"; then
    print_status "Commit segue Conventional Commits" "success"
else
    print_status "Commit n√£o segue Conventional Commits (recomendado)" "warning"
    WARNINGS=$((WARNINGS + 1))
fi

# Resumo final
echo ""
print_status "üìä Resumo das verifica√ß√µes:" "info"
if [ $ERRORS -gt 0 ]; then
    print_status "‚ùå Erros: $ERRORS" "error"
fi
if [ $WARNINGS -gt 0 ]; then
    print_status "‚ö†Ô∏è Avisos: $WARNINGS" "warning"
fi

# Decis√£o final
if [ $ERRORS -eq 0 ]; then
    print_status "üéâ Push autorizado!" "success"
    
    if [ $WARNINGS -gt 0 ]; then
        print_status "‚ö†Ô∏è $WARNINGS aviso(s) encontrado(s), mas n√£o s√£o bloqueantes." "warning"
    fi
    
    exit 0
else
    print_status "‚õî $ERRORS erro(s) encontrado(s). Corrija antes de fazer push." "error"
    echo ""
    echo "üí° Dicas para corrigir:"
    echo "   - Execute 'pytest tests/' para ver falhas em testes"
    echo "   - Execute 'python build_exe.py' para testar o build"
    echo "   - Resolva conflitos de merge se houver"
    echo "   - Certifique-se de que todos os commits foram feitos"
    
    exit 1
fi
