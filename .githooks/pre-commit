#!/bin/bash
# Pre-commit hook para Ordem do Dia
# Este script executa antes de cada commit para garantir qualidade do código

echo "🚀 Executando verificações pre-commit..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Contador de erros
ERRORS=0

# Função para printar mensagens coloridas
print_status() {
    case $2 in
        "success") echo -e "${GREEN}✅ $1${NC}" ;;
        "error") echo -e "${RED}❌ $1${NC}" ;;
        "warning") echo -e "${YELLOW}⚠️ $1${NC}" ;;
        *) echo "ℹ️ $1" ;;
    esac
}

# Verificar se estamos no diretório correto
if [ ! -f "gerar_od.py" ]; then
    print_status "Não encontrado no diretório raiz do projeto" "error"
    exit 1
fi

# 1. Verificar se Python está disponível
print_status "Verificando Python..." "info"
if ! command -v python &> /dev/null; then
    print_status "Python não encontrado. Instale Python 3.11+" "error"
    exit 1
fi

PYTHON_VERSION=$(python -c "import sys; print('.'.join(map(str, sys.version_info[:2])))")
print_status "Python $PYTHON_VERSION detectado" "success"

# 2. Verificar ambiente virtual
if [ -z "$VIRTUAL_ENV" ]; then
    print_status "Ambiente virtual não ativado. Ativando .venv..." "warning"
    if [ -f ".venv/Scripts/activate" ]; then
        source .venv/Scripts/activate
        print_status "Ambiente virtual ativado" "success"
    elif [ -f ".venv/bin/activate" ]; then
        source .venv/bin/activate
        print_status "Ambiente virtual ativado" "success"
    else
        print_status "Ambiente virtual não encontrado. Execute: python -m venv .venv" "error"
        exit 1
    fi
fi

# 3. Verificar dependências
print_status "Verificando dependências..." "info"
if ! python -c "import pytest, black, flake8" &> /dev/null; then
    print_status "Instalando dependências de desenvolvimento..." "warning"
    pip install pytest black flake8 > /dev/null 2>&1
fi

# 4. Executar formatação automática (Black)
print_status "Verificando formatação de código..." "info"
if ! black --check . > /dev/null 2>&1; then
    print_status "Aplicando formatação automática..." "warning"
    black .
    print_status "Código formatado. Adicione as mudanças e tente o commit novamente." "warning"
    exit 1
else
    print_status "Formatação de código OK" "success"
fi

# 5. Linting (Flake8)
print_status "Executando linting..." "info"
if ! flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics > /dev/null 2>&1; then
    print_status "Erros de linting encontrados:" "error"
    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    ERRORS=$((ERRORS + 1))
else
    print_status "Linting OK" "success"
fi

# 6. Testes rápidos
print_status "Executando testes rápidos..." "info"
if ! python -m pytest test_simple.py -q > /dev/null 2>&1; then
    print_status "Testes rápidos falharam:" "error"
    python -m pytest test_simple.py -v
    ERRORS=$((ERRORS + 1))
else
    print_status "Testes rápidos OK" "success"
fi

# 7. Verificar arquivos obrigatórios
print_status "Verificando arquivos obrigatórios..." "info"
REQUIRED_FILES=("gerar_od.py" "gerador_od_completo.py" "requirements.txt" "config_dias_filmagem.json")
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        print_status "Arquivo obrigatório ausente: $file" "error"
        ERRORS=$((ERRORS + 1))
    fi
done

if [ $ERRORS -eq 0 ]; then
    print_status "Verificações obrigatórias OK" "success"
fi

# 8. Testes de integração e cobertura (conforme pipeline CI/CD)
BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$BRANCH" = "main" ]; then
    print_status "Branch main detectada - executando testes completos com cobertura..." "info"
    
    # Instalar pytest-cov se necessário
    if ! python -c "import pytest_cov" &> /dev/null; then
        print_status "Instalando pytest-cov..." "warning"
        pip install pytest-cov > /dev/null 2>&1
    fi
    
    # Executar testes com cobertura (mesmo critério da CI/CD)
    if ! python -m pytest --cov=. --cov-fail-under=90 -q > /dev/null 2>&1; then
        print_status "Testes com cobertura 90% falharam:" "error"
        echo "📊 Executando relatório de cobertura detalhado:"
        python -m pytest --cov=. --cov-report=term-missing --tb=short
        print_status "❌ Cobertura abaixo de 90% - commit bloqueado" "error"
        ERRORS=$((ERRORS + 1))
    else
        print_status "Testes com cobertura ≥90% OK" "success"
    fi
else
    print_status "Branch secundária - executando testes básicos de integração..." "info"
    if ! python -m pytest tests/ -q > /dev/null 2>&1; then
        print_status "Testes de integração falharam (não-bloqueante em pre-commit)" "warning"
        print_status "Execute 'pytest tests/' para ver detalhes" "warning"
    else
        print_status "Testes de integração OK" "success"
    fi
fi

# 9. Verificação final
# Build do executável é verificado apenas no pre-push para evitar loops

# Resultado final
echo ""
if [ $ERRORS -eq 0 ]; then
    print_status "✨ Todas as verificações passaram! Commit autorizado." "success"
    echo "📈 Cobertura de testes: 74% (meta: 90%+ para branch main)"
    exit 0
else
    print_status "$ERRORS erro(s) encontrado(s). Corrija antes de commitar." "error"
    echo ""
    echo "🔧 Dicas para corrigir:"
    echo "   - Execute 'black .' para formatar código"
    echo "   - Execute 'flake8 .' para ver erros de linting"
    echo "   - Execute 'pytest test_simple.py' para testes básicos"
    echo "   - Execute 'pytest --cov=. --cov-report=term-missing' para cobertura"
    echo "   - Execute 'pytest tests/' para testes completos"
    echo ""
    echo "📊 Meta de cobertura: 90%+ para commits na branch main"
    exit 1
fi
